# coding=utf-8
import header
import telebot
import pymysql
import sys
import time
import datetime
import os
import urllib


reload(sys)
sys.setdefaultencoding('utf8')

bot = telebot.TeleBot(header.token)
bot.remove_webhook()

def addUser(message): #  –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    friend_id = message.text.replace("/start ", "")
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    if not cur.execute("SELECT * FROM users WHERE id = %s", (message.from_user.id,)):
        name = ""
        if message.chat.first_name:
            name += str(message.chat.first_name)
        if message.chat.last_name:
            name += " " + str(message.chat.last_name)
        if message.from_user.username:
            name += " (@" + str(message.from_user.username) + ")"

        if friend_id.isdigit():
            bot.send_message(chat_id=friend_id, text="–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 15—Ä –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.Ô∏è", parse_mode="HTML")
            bot.send_message(chat_id=message.chat.id,
                             text="–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 15—Ä –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 15—Ä –∑–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!",
                             parse_mode="HTML")
            cur.execute("INSERT INTO users (id,name, balance) VALUES(%s, %s, 15) ", (message.chat.id, name))
            cur.execute("UPDATE users SET balance = balance + 15, addUsers = addUsers + 1 WHERE id = %s", (friend_id))
        else:
            cur.execute("INSERT INTO users (id,name) VALUES(%s, %s) ", (message.chat.id, name))
    con.commit()
    con.close()


def checkUser(message): # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db)
    cur = con.cursor()
    user = cur.execute("SELECT * FROM users WHERE id = %s", (message.from_user.id,))
    con.commit()
    con.close()
    if user:
        return True
    else:
        return False

def getBalance(userID):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("SELECT balance FROM users WHERE id = %s ", (userID))
    con.commit()
    con.close()
    return cur.fetchone()[0]

def setBalance(userID):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("UPDATE users SET balance = 0 WHERE id = %s ", (userID))
    con.commit()
    con.close()

def addToField(userID, field, col):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db,charset="utf8mb4")
    cur = con.cursor()
    cur.execute("UPDATE users SET " + field + " = " + field + "+ %s WHERE id = %s ", (col,userID))
    con.commit()
    con.close()

def addCommand(id, command):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("UPDATE users SET command = %s WHERE id = %s ", (command, id))
    con.commit()
    con.close()

def getField(message, field):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("SELECT " + field + " FROM users WHERE id = %s ", (message.chat.id,))
    con.commit()
    con.close()
    return cur.fetchone()[0]


def clearDB(message):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("UPDATE users SET command = NULL, text=NULL WHERE id = %s ", (message.chat.id))
    con.commit()
    con.close()



def tg_chanels(message, msg_id):
    lastChannel = getField(message, "tg")
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("SELECT * FROM chanels WHERE id > %s", (lastChannel,))
    chanel = cur.fetchone()
    if chanel == None:
        bot.edit_message_text(chat_id=message.chat.id, message_id=msg_id, text="–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ!")
    else:
        cur.execute("UPDATE users SET tg = %s WHERE id = %s", (chanel[0],message.chat.id))
        bot.edit_message_text(chat_id=message.chat.id,message_id=msg_id, text="–ó–∞–¥–∞–Ω–∏–µ ‚Ññ " +str(chanel[0])+ "\n1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø—Ä–æ–ª–∏—Å—Ç–∞–π—Ç–µ –ª–µ–Ω—Ç—É –≤–≤–µ—Ä—Ö (5-10 –ø–æ—Å—Ç–æ–≤)\n"
                                                       "2Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º!", parse_mode="markdown", reply_markup=keyFollow(bot.export_chat_invite_link(chanel[1])))
    con.commit()
    con.close()

def checkChanel(message,callid):
    num = [int(s) for s in message.text.split() if s.isdigit()]
    num = num[0]
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("SELECT * FROM chanels WHERE id = %s", (num,))
    cid = cur.fetchone()[1]
    status = bot.get_chat_member(chat_id=cid, user_id=message.chat.id).status
    if status != "member" and status != "administrator" and status != "creator":
        bot.answer_callback_query(callback_query_id=callid, text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
    else:
        bot.answer_callback_query(callback_query_id=callid, text="–ù–∞—á–∏—Å—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!")
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 15—Ä –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª\n\n*–í —Å–ª—É—á–∞–µ –æ—Ç–ø–∏—Å–∫–∏ –º—ã –æ—à—Ç—Ä—Ñ—É–µ–º –≤–∞—Å –Ω–∞ 50—Ä*", reply_markup=keyNext(), parse_mode="markdown")
        addToField(message.chat.id, "balance", 15)
    con.commit()
    con.close()

def setDate(userID):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db,charset="utf8mb4")
    cur = con.cursor()
    cur.execute("UPDATE users SET active = %s WHERE id = %s ", (datetime.date.today(), userID))
    con.commit()
    con.close()

def people_count():
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db)
    cur = con.cursor()
    cur.execute("select count(*) from users");
    people = cur.fetchone()[0]
    con.commit()
    con.close()
    if(people):
        return people
    else:
        return 0

def addChanel(id):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db)
    cur = con.cursor()
    cur.execute("INSERT INTO chanels (idc) VALUES(%s) ", (id))
    con.commit()
    con.close()

def getCh(userID):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("SELECT * FROM chanels ")
    chanels = cur.fetchall()
    kboard = keyDel()
    for ch in chanels:
        chat = bot.get_chat(chat_id=ch[1])
        txt = "ID –ö–∞–Ω–∞–ª–∞ –≤ –ë–î - " + str(ch[0]) + "\n"\
              "ID –ö–∞–Ω–∞–ª–∞ –≤ TG " + str(ch[1]) + "\n"\
              "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ - " + chat.title + "\n"\
              "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - " + chat.invite_link
        bot.send_message(userID, txt, reply_markup=kboard)
        time.sleep(.2)
    con.commit()
    con.close()

def delCh(cid, message):
    num = [int(s) for s in message.text.split() if s.isdigit()]
    num = num[0]
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    bot.delete_message(message.chat.id, message.message_id)
    bot.answer_callback_query(callback_query_id=cid, text="–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω", show_alert=True)
    cur.execute("DELETE FROM chanels WHERE id = %s", (num))
    con.commit()
    con.close()

def addText(message):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("UPDATE users SET text = %s WHERE id = %s", (message.text, int(message.chat.id)))
    con.commit()
    con.close()

def getText(message):
    con = pymysql.connect(host=header.host, user=header.usr, passwd=header.password, db=header.db, charset="utf8mb4")
    cur = con.cursor()
    cur.execute("SELECT text FROM users WHERE id = %s", (message.chat.id))
    message_text = cur.fetchone()[0]
    con.commit()
    con.close()
    return message_text

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def keyStart(): # /start
    user_markup = telebot.types.ReplyKeyboardMarkup(True)
    user_markup.row("/start")
    return user_markup

def keySoc():
    user_markup = telebot.types.ReplyKeyboardMarkup(True)
    user_markup.row(header.b_tg, header.b_inst)
    user_markup.row(header.b_home)
    return user_markup

def keyDel():
    user_markup = telebot.types.InlineKeyboardMarkup()
    user_markup.add(telebot.types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=header.b_del))
    return user_markup

def keyFollow(link):
    user_markup = telebot.types.InlineKeyboardMarkup()
    user_markup.add(telebot.types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚§¥Ô∏è", url=link))
    user_markup.add(telebot.types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üîÑ", callback_data=header.b_check))
    return user_markup

def keyNext():
    user_markup = telebot.types.InlineKeyboardMarkup()
    user_markup.add(telebot.types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚û°Ô∏è", callback_data=header.b_next))
    return user_markup

def keyPartner():
    user_markup = telebot.types.InlineKeyboardMarkup()
    user_markup.add(telebot.types.InlineKeyboardButton(text="–ë–æ–Ω—É—Å üéÅ", url="http://rotenberg.beget.tech/track/1/source/campaign-ads"))
    return user_markup

def keyAdmin():
    user_markup = telebot.types.ReplyKeyboardMarkup(True)
    user_markup.row(header.b_msg, header.b_ppl_count)
    user_markup.row(header.b_addch, header.b_delch)
    user_markup.row(header.b_home)
    return user_markup

def keyMain(message):
    clearDB(message)
    user_markup = telebot.types.ReplyKeyboardMarkup(True)
    user_markup.row(header.b_earn, header.b_balance)
    user_markup.row(header.b_more, header.b_partner)
    if message.chat.id in header.admin:
        user_markup.row(header.b_admin)
    return user_markup

def keyBalance():
    user_markup = telebot.types.ReplyKeyboardMarkup(True)
    user_markup.row(header.b_ya, header.b_card)
    user_markup.row(header.b_home)
    return user_markup

def sendMessage():
    user_markup = telebot.types.InlineKeyboardMarkup()
    btn_send_all = telebot.types.InlineKeyboardButton(text=header.b_send_all, callback_data=header.b_send_all)
    btn_cancel = telebot.types.InlineKeyboardButton(text=header.b_cancel, callback_data=header.b_cancel)
    user_markup.add(btn_send_all)
    user_markup.add(btn_cancel)
    return user_markup

def keyYaPay(message):
    user_markup = telebot.types.InlineKeyboardMarkup()
    user_markup.add(telebot.types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å 100—Ä üí≥ –ö–∞—Ä—Ç–æ–π', url='https://money.yandex.ru/quickpay/confirm.xml?receiver=410016025009437&quickpay-form=shop&targets=' + urllib.quote_plus('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤')+ '&paymentType=AC&sum=100&label=' + str(message.chat.id)))
    user_markup.add(telebot.types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å 100—Ä üìí –Ø.–î–µ–Ω—å–≥–∞–º–∏',url='https://money.yandex.ru/quickpay/confirm.xml?receiver=410016025009437&quickpay-form=shop&targets=' + urllib.quote_plus('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤') + '&paymentType=PC&sum=100&label=' + str(message.chat.id)))
    return user_markup


@bot.callback_query_handler(func = lambda c: True)
def inline(c):
    if c.data == header.b_check:
        checkChanel(c.message,c.id)
    elif c.data == header.b_next:
        tg_chanels(c.message, c.message.message_id)
    elif c.data == header.b_del:
        delCh(c.id, c.message)
    if c.data == header.b_cancel:
        clearDB(c.message)
        bot.answer_callback_query(callback_query_id=c.id, text="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.delete_message(chat_id=c.message.chat.id, message_id=c.message.message_id)
    elif c.data == header.b_send_all:
        bot.answer_callback_query(callback_query_id=c.id, text="–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—ã–ª–∫—É")
        os.system("nohup /usr/bin/python /bots/clientBots/moneyernbot/message.py " + str(c.message.chat.id) + "  >/dev/null &")

@bot.message_handler(commands=['start'])
def botStart(message):
    addUser(message)
    bot.send_message(chat_id=message.from_user.id, text=header.t_hello,reply_markup=keyMain(message), parse_mode="HTML")

@bot.message_handler(content_types=["audio", "document", "photo", "sticker", "video", "video_note", "location"]) #–ë–æ–ª—å—à–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
def msg(message):
    lastCommand = getField(message, "command")
    if lastCommand == header.b_addch:
        if message.forward_from_chat:
            try:
                bot.export_chat_invite_link(message.forward_from_chat.id)
            except:
                bot.send_message(message.chat.id,
                                 text="–û—à–∏–±–∫–∞! –ë–æ—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–µ–ª—é –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã —Ç–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –±–æ—Ç—É.",
                                 parse_mode="markdown")
            else:
                addChanel(message.forward_from_chat.id)
                bot.send_message(message.chat.id,
                                 text="–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞–∏—è –æ –∫–∞–Ω–∞–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ \"" + header.b_delch + "\"",
                                 parse_mode="markdown")
                clearDB(message)

@bot.message_handler(content_types=['text'])
def answr(message):
    if checkUser(message):
        if message.text == header.b_earn:
            bot.send_message(chat_id=message.chat.id, text=header.t_soc, reply_markup=keySoc(), parse_mode="markdown")
        elif message.text == header.b_inst: # instagram
            if getField(message, "active") != datetime.date.today():
                setDate(message.chat.id)
                os.system("nohup /usr/bin/python /bots/clientBots/moneyernbot/video.py " + str(message.chat.id) + "  >/dev/null &")
            else:
                bot.send_message(chat_id=message.from_user.id,text="–£—Å–ª—É–≥–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∑–∞ —Å—É—Ç–∫–∏.", parse_mode="markdown")
        elif message.text == header.b_tg: # instagram
            tg_chanels(message, bot.send_message(chat_id=message.chat.id, text="–ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π...").message_id)
        elif message.text == header.b_balance: # –í—ã–≤–æ–¥
            bot.send_message(chat_id=message.from_user.id, text="*–ë–∞–ª–∞–Ω—Å:* " + str(getBalance(message.chat.id)) + "—Ä.\n" + header.t_out, reply_markup=keyBalance(),
                             parse_mode="markdown")
        elif message.text == header.b_more:
            bot.send_message(chat_id=message.chat.id, text="–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å –¥–æ *75.000—Ä!*", reply_markup=keyPartner(), parse_mode="markdown")
        elif message.text == header.b_home: # –ù–∞–∑–∞–¥
            clearDB(message)
            bot.send_message(chat_id=message.chat.id, text=header.t_main, reply_markup=keyMain(message))
        elif message.text == header.b_admin:
            bot.send_message(chat_id=message.chat.id, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º ü§ñ", reply_markup=keyAdmin())
        elif message.text == header.b_partner:
            bot.send_message(chat_id=message.from_user.id,text=header.t_partner + "https://tele.click/MoneyErnBot?start=" + str(message.from_user.id) + "\n\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(getField(message, "addUsers")),parse_mode="markdown", disable_web_page_preview=True)
        elif message.text == header.b_msg:
            addCommand(message.from_user.id, message.text)
            bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É *markdown*", parse_mode="markdown")
        elif message.text == header.b_phone or message.text == header.b_qiwi or message.text == header.b_ya or message.text == header.b_card: # –í—ã–≤–æ–¥ –Ω–∞ –∫–æ—à–µ–ª–µ–∫
            if getBalance(message.chat.id) > 0:
                addCommand(message.chat.id, message.text)
                txt = ""
                if message.text == header.b_phone:
                    txt = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤—ã–ø–ª–∞—Ç–∞"
                elif message.text == header.b_qiwi:
                    txt = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä Qiwi –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤—ã–ø–ª–∞—Ç–∞"
                elif message.text == header.b_ya:
                    txt = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ø–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤—ã–ø–ª–∞—Ç–∞"
                elif message.text == header.b_card:
                    txt = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–¥–µ—Ç –≤—ã–ø–ª–∞—Ç–∞"
                bot.send_message(chat_id=message.chat.id, text=txt, reply_markup=keyBalance())
            else:
                bot.send_message(chat_id=message.chat.id, text=header.t_berror, reply_markup=keyMain(message), parse_mode="markdown")
        else:
            lastCommand = getField(message, "command")
            if lastCommand == header.b_msg:  # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
                addText(message)
                mytext = getText(message)
                try:
                    bot.send_message(message.chat.id, text=mytext, reply_markup=sendMessage(), parse_mode="markdown",disable_web_page_preview=True)
                except:
                    bot.send_message(message.chat.id, "–ì–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–º–µ—Ç–∫—É")
            elif lastCommand == header.b_phone or lastCommand == header.b_qiwi or lastCommand == header.b_card or lastCommand == header.b_ya:
                allok = False
                if lastCommand == header.b_phone:
                    if message.text.isdigit():
                        if len(message.text) > 10:
                            allok = True
                        else:
                            bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 11 —Ü–∏—Ñ—Ä')
                            return
                    else:
                        bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.\n------\n–ü—Ä–∏–º–µ—Ä: 79897773322')
                elif lastCommand == header.b_qiwi:
                    if message.text.isdigit():
                        if len(message.text) > 10:
                            allok = True
                        else:
                            bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä Qiwi –∫–æ—à–µ–ª—å–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 11 —Ü–∏—Ñ—Ä')
                            return
                    else:
                        bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä Qiwi –∫–æ—à–µ–ª—å–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.\n------\n–ü—Ä–∏–º–µ—Ä: 79897773322')
                elif lastCommand == header.b_card:
                    if message.text.isdigit():
                        if len(message.text) == 16:
                            allok = True
                        else:
                            bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä')
                            return
                    else:
                        bot.send_message(message.from_user.id,'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.\n------\n–ü—Ä–∏–º–µ—Ä: 1111222233334444')

                elif lastCommand == header.b_ya:
                    if message.text.isdigit():
                        if len(message.text) == 15:
                            allok = True
                        else:
                            bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä –Ø–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 15 —Ü–∏—Ñ—Ä')
                            return
                    else:
                        bot.send_message(message.from_user.id,'–ù–æ–º–µ—Ä –Ø–Ω–¥–µ–∫—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.\n------\n–ü—Ä–∏–º–µ—Ä: 111122223333444')
                if allok:
                    bot.send_message(message.chat.id, text = "–í—Å–µ –û–∫–µ–π! –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞.",parse_mode="markdown")
                    setBalance(message.chat.id)
                    clearDB(message)
                    if getField(message, "profile") == 0:
                        time.sleep(2)
                        bot.send_message(message.chat.id, text="–û—à–∏–±–∫–∞, –Ω–∞—à–∞ –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –∑–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n1) –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º 100—Ä —Ç–µ–º –∫–æ—à–µ–ª—å–∫–æ–º/–∫–∞—Ä—Ç–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π/–∫–æ—Ç–æ—Ä—É—é –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞"
                                                               "\n\n2) –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑–≤–∏–∑–∏—Ç–æ–≤ –º—ã —Å–º–æ–∂–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å –í–∞–º –¥–µ–Ω—å–≥–∏"
                                                               "\n\n3) –î–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∞", reply_markup=keyYaPay(message),parse_mode="HTML")
            elif lastCommand == header.b_addch:
                if message.forward_from_chat:
                    try:
                        bot.export_chat_invite_link(message.forward_from_chat.id)
                    except:
                        bot.send_message(message.chat.id, text="–û—à–∏–±–∫–∞! –ë–æ—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–µ–ª—é –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã —Ç–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –±–æ—Ç—É.",parse_mode="markdown")
                    else:
                        addChanel(message.forward_from_chat.id)
                        bot.send_message(message.chat.id, text="–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞–∏—è –æ –∫–∞–Ω–∞–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ \"" + header.b_delch + "\"", parse_mode="markdown")
                        clearDB(message)
                else:
                    bot.send_message(message.chat.id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞", parse_mode="markdown")
            elif message.chat.id in header.admin:
                if message.text == header.b_ppl_count:
                    bot.send_message(message.from_user.id, "–õ—é–¥–µ–π –≤ –±–æ—Ç–µ: <b>" + str(people_count()) + "</b>",parse_mode="HTML")
                elif message.text == header.b_addch:
                    addCommand(message.from_user.id, message.text)
                    bot.send_message(message.from_user.id, header.t_addch, parse_mode="markdown")
                elif message.text == header.b_delch:
                    getCh(message.chat.id)
                elif message.text == header.b_msg:
                    ""
            else:
                clearDB(message)
                bot.send_message(message.chat.id, text="–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=keyMain(message), parse_mode="markdown")

    else:
        bot.send_message(chat_id=message.from_user.id, text="–ù–∞–∂–º–∏—Ç–µ /start", reply_markup=keyStart(),
                         parse_mode="HTML")


bot.polling(none_stop=True, timeout=60)